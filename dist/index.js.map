{"version":3,"file":"index.js","mappings":";;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;AC5Da;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE,OAAO;AACnF;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE,OAAO;AACnF;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB;AAClB;;;;;;;ACtCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA,2DAA2D,UAAU,KAAK,QAAQ,MAAM,OAAO;AAC/F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;;;;;;AC9Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;AC1Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,qBAAqB,mBAAO,CAAC,GAAc;AAC3C,oBAAoB,mBAAO,CAAC,GAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;UClIA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBa;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D,qBAAqB,mBAAO,CAAC,GAAc;AAC3C,uBAAuB,mBAAO,CAAC,GAAgB;AAC/C,sBAAsB,mBAAO,CAAC,GAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iDAAiD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yDAAyD;AACrG;AACA;AACA,CAAC;AACD;AACA,iC","sources":["webpack://intonation/./src/midiFloat.js","webpack://intonation/./src/midiHelper.js","webpack://intonation/./src/midiTruncate.js","webpack://intonation/./src/singleTone.js","webpack://intonation/./src/touchCanvas.js","webpack://intonation/webpack/bootstrap","webpack://intonation/./src/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MidiFloat = void 0;\n//  npm install @types/webmidi\nclass MidiFloat {\n    midiOutput;\n    previousNote = null;\n    previousBend = 0;\n    constructor(midiOutput) {\n        this.midiOutput = midiOutput;\n    }\n    setNote(note) {\n        const newNote = Math.round(note);\n        if (this.previousNote != newNote) {\n            // Send Note On event for new note\n            this.sendNoteOn(newNote);\n            // Send Note Off event for previous note after the on\n            // event so that we get a legato transition.\n            if (this.previousNote !== null) {\n                this.sendNoteOff(this.previousNote);\n            }\n        }\n        // Send pitch bend event for fractional part of note\n        const pitchBend = note - newNote;\n        if (pitchBend != this.previousBend) {\n            this.sendPitchBend(pitchBend);\n            this.previousBend = pitchBend;\n        }\n        // Save new note as previous note\n        this.previousNote = newNote;\n    }\n    noteOff() {\n        // Send Note Off event for previous note\n        if (this.previousNote !== null) {\n            this.sendNoteOff(this.previousNote);\n            this.previousNote = null;\n        }\n    }\n    sendNoteOn(note) {\n        const message = [0x90, note, 96];\n        this.midiOutput.send(message);\n        // console.log(`${message}`)\n    }\n    sendNoteOff(note) {\n        const message = [0x90, note, 0];\n        this.midiOutput.send(message);\n        // console.log(`${message}`)\n    }\n    // `bend` is a floating point number -1 to +1 for\n    // the amount of desired bend measured in semitones.\n    sendPitchBend(bend) {\n        // Convert bend value from semitones to 14-bit pitch bend value\n        const value = Math.round((bend * (2 << 10) + (2 << 12)));\n        const message = [0xE0, value & 0x7F, value >> 7 & 0x7F];\n        // Send MIDI message\n        // console.log(`${message}`)\n        this.midiOutput.send(message);\n    }\n}\nexports.MidiFloat = MidiFloat;\n//# sourceMappingURL=midiFloat.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MIDIHelper = void 0;\nclass MIDIHelper {\n    static async getDefaultOutput() {\n        if (!navigator.requestMIDIAccess)\n            throw new Error(\"Your browser does not support WebMIDI API\");\n        const access = await navigator.requestMIDIAccess();\n        return new Promise((resolve, reject) => {\n            document.body.innerHTML = '';\n            for (const [name, o] of access.outputs.entries()) {\n                const button = document.createElement('button');\n                button.textContent = `${o.name} ${o.id} ${o.manufacturer} ${o.type}`;\n                button.addEventListener('click', function () {\n                    resolve(o);\n                }.bind(o));\n                document.body.appendChild(button);\n            }\n        });\n    }\n    static async getDefaultInput() {\n        if (!navigator.requestMIDIAccess)\n            throw new Error(\"Your browser does not support WebMIDI API\");\n        const access = await navigator.requestMIDIAccess();\n        return new Promise((resolve, reject) => {\n            document.body.innerHTML = '';\n            for (const [name, i] of access.inputs.entries()) {\n                const button = document.createElement('button');\n                button.textContent = `${i.name} ${i.id} ${i.manufacturer} ${i.type}`;\n                button.addEventListener('click', function () {\n                    resolve(i);\n                }.bind(i));\n                document.body.appendChild(button);\n            }\n        });\n    }\n}\nexports.MIDIHelper = MIDIHelper;\n//# sourceMappingURL=midiHelper.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MidiTruncate = void 0;\nclass MidiTruncate {\n    lowNote;\n    constructor(lowNote, i, o) {\n        this.lowNote = lowNote;\n        document.body.innerHTML = `MIDI Truncate running ${lowNote}; In=${i.name} Out=${o.name}`;\n        i.addEventListener('midimessage', (e) => {\n            o.send(this.translate(e.data));\n        });\n    }\n    translate(data) {\n        if (data.length < 3) {\n            return data;\n        }\n        let code = data[0] & 0xf0;\n        if (code == 0x80 || code == 0x90) {\n            const newData = new Uint8Array(data);\n            const oldKey = data[1];\n            const newKey = ((oldKey - this.lowNote + 8 * 12) % 12) + this.lowNote;\n            newData[1] = newKey;\n            return newData;\n        }\n        else {\n            return data;\n        }\n    }\n}\nexports.MidiTruncate = MidiTruncate;\n//# sourceMappingURL=midiTruncate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingleTone = void 0;\nclass SingleTone {\n    audioContext;\n    oscillator;\n    lowPassFilter;\n    gain;\n    constructor(audioContext) {\n        this.audioContext = audioContext;\n        // Create oscillator node\n        this.oscillator = this.audioContext.createOscillator();\n        this.oscillator.type = 'square';\n        // Create low pass filter node\n        this.lowPassFilter = this.audioContext.createBiquadFilter();\n        this.lowPassFilter.type = 'lowpass';\n        this.gain = this.audioContext.createGain();\n        this.gain.gain.setValueAtTime(0, audioContext.currentTime);\n        this.oscillator.connect(this.lowPassFilter);\n        this.lowPassFilter.connect(this.gain);\n        this.gain.connect(this.audioContext.destination);\n        this.setNote(69 - 12);\n        this.oscillator.start();\n    }\n    setFrequency(frequency) {\n        this.oscillator.frequency.value = frequency;\n        this.lowPassFilter.frequency.value = frequency * 2;\n        // this.oscillator.frequency.setTargetAtTime(frequency, this.audioContext.currentTime, 1 / 60);\n        // this.lowPassFilter.frequency.setTargetAtTime(frequency * 2, this.audioContext.currentTime, 1 / 60);\n    }\n    setNote(note) {\n        // Convert MIDI note number to frequency in Hz\n        const frequency = 440 * Math.pow(2, (note - 69) / 12);\n        // Call setFrequency function with the calculated frequency\n        this.setFrequency(frequency);\n    }\n    setGain(gain) {\n        // Set gain value\n        this.gain.gain.setTargetAtTime(gain, this.audioContext.currentTime, 0.1);\n    }\n}\nexports.SingleTone = SingleTone;\n//# sourceMappingURL=singleTone.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TouchCanvas = void 0;\nconst singleTone_1 = require(\"./singleTone\");\nconst midiFloat_1 = require(\"./midiFloat\");\nclass TouchCanvas {\n    midiOutput;\n    canvas;\n    ctx;\n    keyPitch = 60;\n    lowNote = 67 - 24;\n    activePoints = new Map();\n    tones = new Map();\n    midiFloat;\n    constructor(audioContext, midiOutput) {\n        this.midiOutput = midiOutput;\n        // Create canvas element\n        this.canvas = document.createElement('canvas');\n        for (let i = 0; i < 10; ++i) {\n            this.tones.set(i, new singleTone_1.SingleTone(audioContext));\n        }\n        this.midiFloat = new midiFloat_1.MidiFloat(midiOutput);\n        // Set canvas dimensions to fill the screen\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        // Add canvas to document body\n        document.body.innerHTML = '';\n        document.body.appendChild(this.canvas);\n        // Get 2D rendering context\n        this.ctx = this.canvas.getContext('2d');\n        // Set up touch handler\n        this.canvas.addEventListener('touchstart', this.handleDown.bind(this));\n        this.canvas.addEventListener('touchend', this.handleTouchEnd.bind(this));\n        this.canvas.addEventListener('touchcancel', this.handleTouchEnd.bind(this));\n        this.canvas.addEventListener('touchmove', this.handleDown.bind(this));\n        // // Set up mouse handler\n        // this.canvas.addEventListener('mousedown', this.handleDown.bind(this));\n        // this.canvas.addEventListener('mouseup', this.handleUp.bind(this));\n        // this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));\n        const render = () => {\n            this.drawKeyboard();\n            this.setTone();\n            window.requestAnimationFrame(render);\n        };\n        render();\n    }\n    setTone() {\n        for (let i = 0; i < 10; ++i) {\n            const tone = this.tones.get(i);\n            if (this.activePoints.has(i)) {\n                const xy = this.activePoints.get(i);\n                const note = this.lowNote + xy[0] / this.keyPitch - 0.5;\n                tone.setNote(note);\n                tone.setGain(0.1);\n                this.midiFloat.setNote(note);\n            }\n            else {\n                tone.setGain(0);\n                this.midiFloat.noteOff();\n            }\n        }\n    }\n    drawKeyboard() {\n        this.ctx.fillStyle = 'grey';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        const numKeys = Math.ceil(this.canvas.width / this.keyPitch);\n        // Draw lines\n        for (let i = 0; i < numKeys; i++) {\n            // Calculate x position of line\n            const x = (i + 0.5) * this.keyPitch;\n            const w1 = this.keyPitch * 0.05;\n            const w2 = this.keyPitch * 0.3;\n            const noteNumber = (this.lowNote + i) % 12;\n            if (noteNumber == 1 || noteNumber == 3 || noteNumber == 6 || noteNumber == 8 || noteNumber == 10) {\n                // Draw black line\n                this.ctx.fillStyle = '#333';\n                this.ctx.fillRect(x - w2, 0, 2 * w2, this.canvas.height / 2);\n                this.ctx.fillStyle = '#000';\n                this.ctx.fillRect(x - w1, 0, 2 * w1, this.canvas.height / 2);\n            }\n            else {\n                // Draw white line\n                this.ctx.fillStyle = '#aaa';\n                this.ctx.fillRect(x - w2, 0, 2 * w2, this.canvas.height);\n                this.ctx.fillStyle = '#fff';\n                this.ctx.fillRect(x - w1, 0, 2 * w1, this.canvas.height);\n            }\n        }\n        for (const [i, xy] of this.activePoints) {\n            this.fillCircle(xy[0], xy[1]);\n        }\n    }\n    handleDown(event) {\n        // Get event coordinates\n        for (let i = 0; i < event.touches.length; ++i) {\n            const touch = event.touches.item(i);\n            // console.log(`Down: ${touch.identifier}`);\n            const x = touch.clientX - this.canvas.offsetLeft;\n            const y = touch.clientY - this.canvas.offsetTop;\n            this.fillCircle(x, y);\n            this.activePoints.set(touch.identifier, [x, y]);\n        }\n        event.preventDefault();\n    }\n    fillCircle(x, y) {\n        // Fill circle at event coordinates\n        this.ctx.beginPath();\n        this.ctx.arc(x, y, 40, 0, 2 * Math.PI);\n        this.ctx.fillStyle = 'red';\n        this.ctx.fill();\n    }\n    activeIds = new Set();\n    handleTouchEnd(event) {\n        this.activeIds.clear();\n        for (let i = 0; i < event.touches.length; ++i) {\n            this.activeIds.add(event.touches.item(i).identifier);\n        }\n        for (const [i, tone] of this.tones) {\n            if (!this.activeIds.has(i) && this.activePoints.has(i)) {\n                // console.log(`Up: ${i}`);\n                this.tones.get(i).setGain(0);\n                this.activePoints.delete(i);\n                // TODO: Send MIDI Off\n            }\n        }\n        event.preventDefault();\n        // Handle touch end events\n    }\n}\nexports.TouchCanvas = TouchCanvas;\n//# sourceMappingURL=touchCanvas.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst midiHelper_1 = require(\"./midiHelper\");\nconst midiTruncate_1 = require(\"./midiTruncate\");\nconst touchCanvas_1 = require(\"./touchCanvas\");\ndocument.body.innerHTML = '';\nconst button = document.createElement('button');\nbutton.textContent = 'Begin!';\nbutton.addEventListener('click', async () => {\n    const audioContext = new AudioContext();\n    const o = await midiHelper_1.MIDIHelper.getDefaultOutput();\n    document.body.innerHTML = '';\n    const i = await midiHelper_1.MIDIHelper.getDefaultInput();\n    document.body.innerHTML = '';\n    {\n        const b = document.createElement('button');\n        b.textContent = 'TouchCanvas';\n        b.addEventListener('click', () => { new touchCanvas_1.TouchCanvas(audioContext, o); });\n        document.body.appendChild(b);\n    }\n    {\n        const b = document.createElement('button');\n        b.textContent = 'MIDI Truncate';\n        // https://newt.phys.unsw.edu.au/jw/notes.html\n        // B3 59\n        // C4 60\n        // D4 62\n        // E4 64\n        // F4 65\n        // G4 67\n        // A4 69 \n        b.addEventListener('click', () => { new midiTruncate_1.MidiTruncate(/*lowNote=*/ 59, i, o); });\n        document.body.appendChild(b);\n    }\n});\ndocument.body.appendChild(button);\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}